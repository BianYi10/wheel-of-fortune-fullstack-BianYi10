{"ast":null,"code":"var _jsxFileName = \"/root/wheel-of-fortune-fullstack-BianYi10/front/src/HistoryScoreWindow.js\",\n  _s = $RefreshSig$();\nimport axios from 'axios';\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HistoryScoreWindow = user => {\n  _s();\n  // State hooks for managing game history and loading status\n  const [historyScores, setHistoryScores] = useState([]); // Stores example history scores\n  const [loading, setLoading] = useState(true);\n\n  // State hooks for pagination\n  const [currentPage, setCurrentPage] = useState(0);\n  const [pageSize, setPageSize] = useState(10);\n  // State for paginating history scores\n  const [currentHistoryPage, setCurrentHistoryPage] = useState(0);\n  const [paginatedHistoryScores, setPaginatedHistoryScores] = useState([]);\n\n  // State for paginating all player scores\n  const [currentAllPlayerPage, setCurrentAllPlayerPage] = useState(0);\n  const [paginatedAllPlayerScores, setPaginatedAllPlayerScores] = useState([]);\n\n  // Handles the deletion of a score\n  const handleDeleteScore = (index, id) => {\n    const url = `https://wheeloffortune-68830.ue.r.appspot.com/api/GameRecords/removeGameRecordById?id=${id}`;\n    axios.post(url).then(response => {\n      setHistoryScores(prevScores => prevScores.filter((_, i) => i !== index));\n    }).catch(error => {\n      console.error(\"Error:\", error.message);\n    });\n  };\n\n  // Fetches game records by the user's Google ID\n  function findGameRecordsByGoogleId() {\n    const url = `https://wheeloffortune-68830.ue.r.appspot.com/api/GameRecords/findGameRecordsByGoogleId?googleId=${user.googleId}`;\n    axios.get(url).then(response => {\n      setHistoryScores(response.data);\n      paginateHistoryData(response.data, 0);\n    }).catch(error => {\n      console.error(\"Error:\", error.message);\n    });\n  }\n  ;\n\n  // Async function to fetch data with pagination\n  const fetchData = async (page = 0) => {\n    try {\n      const url = `https://wheeloffortune-68830.ue.r.appspot.com/api/GameRecords/findGameRecordsOrderByScoreDesc?page=${page}&size=${pageSize}`;\n      const response = await axios.get(url);\n      const records = response.data.content;\n      setPaginatedAllPlayerScores(records); // Directly set to the current page data fetched from backend\n\n      // Fetching user information associated with each game record\n      const recordsWithUserInfo = await Promise.all(records.map(async record => {\n        const userInfoResponse = await axios.get(`https://wheeloffortune-68830.ue.r.appspot.com/api/UserInfo/findUserInfoByGoogleId?googleId=${record.googleId}`);\n        return {\n          ...record,\n          userName: userInfoResponse.data[0].userName // Assuming 'userName' field is present in returned user info\n        };\n      }));\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handles page changes for the history scores\n  const handleHistoryPageChange = newPage => {\n    setCurrentHistoryPage(newPage);\n    paginateHistoryData(historyScores, newPage);\n  };\n\n  // Handles page changes for all player scores\n  const handleAllPlayerPageChange = newPage => {\n    setCurrentAllPlayerPage(newPage);\n    fetchData(newPage); // The fetchData function should be updated to use currentAllPlayerPage\n  };\n\n  // Implements pagination logic for history scores\n  function paginateHistoryData(fullList, page) {\n    const startIndex = page * pageSize;\n    const paginatedList = fullList.slice(startIndex, startIndex + pageSize);\n    setPaginatedHistoryScores(paginatedList);\n  }\n\n  // useEffect hook to fetch game records by Google ID and load the first page of data\n  useEffect(() => {\n    findGameRecordsByGoogleId();\n    fetchData(0); // Load the first page of data\n  }, []);\n\n  // Conditional rendering for loading state\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"History Scores\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: paginatedHistoryScores.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Date:\", item.date, \" Score:\", item.score, \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleDeleteScore(index, item.id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 73\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleHistoryPageChange(currentHistoryPage - 1),\n        disabled: currentHistoryPage === 0,\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"Page \", currentHistoryPage + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleHistoryPageChange(currentHistoryPage + 1),\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"All Player Scores\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: paginatedAllPlayerScores.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"UserName:\", item.userName, \" Date:\", item.date, \" Score:\", item.score]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleAllPlayerPageChange(currentAllPlayerPage - 1),\n        disabled: currentAllPlayerPage === 0,\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"Page \", currentAllPlayerPage + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleAllPlayerPageChange(currentAllPlayerPage + 1),\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }, this);\n};\n_s(HistoryScoreWindow, \"BCtxT87yi5m48EBGx+kFv8Vh2jE=\");\n_c = HistoryScoreWindow;\nexport default HistoryScoreWindow;\nvar _c;\n$RefreshReg$(_c, \"HistoryScoreWindow\");","map":{"version":3,"names":["axios","React","useState","useEffect","jsxDEV","_jsxDEV","HistoryScoreWindow","user","_s","historyScores","setHistoryScores","loading","setLoading","currentPage","setCurrentPage","pageSize","setPageSize","currentHistoryPage","setCurrentHistoryPage","paginatedHistoryScores","setPaginatedHistoryScores","currentAllPlayerPage","setCurrentAllPlayerPage","paginatedAllPlayerScores","setPaginatedAllPlayerScores","handleDeleteScore","index","id","url","post","then","response","prevScores","filter","_","i","catch","error","console","message","findGameRecordsByGoogleId","googleId","get","data","paginateHistoryData","fetchData","page","records","content","recordsWithUserInfo","Promise","all","map","record","userInfoResponse","userName","handleHistoryPageChange","newPage","handleAllPlayerPageChange","fullList","startIndex","paginatedList","slice","children","fileName","_jsxFileName","lineNumber","columnNumber","item","date","score","onClick","disabled","_c","$RefreshReg$"],"sources":["/root/wheel-of-fortune-fullstack-BianYi10/front/src/HistoryScoreWindow.js"],"sourcesContent":["import axios from 'axios';\nimport React, { useState, useEffect } from 'react';\n\nconst HistoryScoreWindow = (user) => {\n    // State hooks for managing game history and loading status\n    const [historyScores, setHistoryScores] = useState([]); // Stores example history scores\n    const [loading, setLoading] = useState(true);\n\n    // State hooks for pagination\n    const [currentPage, setCurrentPage] = useState(0);\n    const [pageSize, setPageSize] = useState(10);\n    // State for paginating history scores\n    const [currentHistoryPage, setCurrentHistoryPage] = useState(0);\n    const [paginatedHistoryScores, setPaginatedHistoryScores] = useState([]);\n\n    // State for paginating all player scores\n    const [currentAllPlayerPage, setCurrentAllPlayerPage] = useState(0);\n    const [paginatedAllPlayerScores, setPaginatedAllPlayerScores] = useState([]);\n\n    // Handles the deletion of a score\n    const handleDeleteScore = (index, id) => {\n        const url = `https://wheeloffortune-68830.ue.r.appspot.com/api/GameRecords/removeGameRecordById?id=${id}`;\n        axios.post(url)\n        .then(response => {\n            setHistoryScores(prevScores => prevScores.filter((_, i) => i !== index));\n        })\n        .catch(error => {\n            console.error(\"Error:\", error.message);\n        });\n    };\n\n    // Fetches game records by the user's Google ID\n    function findGameRecordsByGoogleId() {\n        const url = `https://wheeloffortune-68830.ue.r.appspot.com/api/GameRecords/findGameRecordsByGoogleId?googleId=${user.googleId}`;\n        axios.get(url)\n          .then(response => {\n            setHistoryScores(response.data);\n            paginateHistoryData(response.data, 0);\n          })\n          .catch(error => {\n            console.error(\"Error:\", error.message);\n          });\n    };\n\n    // Async function to fetch data with pagination\n    const fetchData = async (page = 0) => {\n        try {\n            const url = `https://wheeloffortune-68830.ue.r.appspot.com/api/GameRecords/findGameRecordsOrderByScoreDesc?page=${page}&size=${pageSize}`;\n            const response = await axios.get(url);\n            const records = response.data.content;\n            setPaginatedAllPlayerScores(records); // Directly set to the current page data fetched from backend\n\n            // Fetching user information associated with each game record\n            const recordsWithUserInfo = await Promise.all(records.map(async record => {\n                const userInfoResponse = await axios.get(`https://wheeloffortune-68830.ue.r.appspot.com/api/UserInfo/findUserInfoByGoogleId?googleId=${record.googleId}`);\n                return {\n                    ...record,\n                    userName: userInfoResponse.data[0].userName // Assuming 'userName' field is present in returned user info\n                };\n            }));\n\n        } catch (error) {\n            console.error(\"Error fetching data:\", error);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    // Handles page changes for the history scores\n    const handleHistoryPageChange = (newPage) => {\n        setCurrentHistoryPage(newPage);\n        paginateHistoryData(historyScores, newPage);\n    };\n\n    // Handles page changes for all player scores\n    const handleAllPlayerPageChange = (newPage) => {\n        setCurrentAllPlayerPage(newPage);\n        fetchData(newPage); // The fetchData function should be updated to use currentAllPlayerPage\n    };\n\n    // Implements pagination logic for history scores\n    function paginateHistoryData(fullList, page) {\n        const startIndex = page * pageSize;\n        const paginatedList = fullList.slice(startIndex, startIndex + pageSize);\n        setPaginatedHistoryScores(paginatedList);\n    }\n\n    // useEffect hook to fetch game records by Google ID and load the first page of data\n    useEffect(() => {\n        findGameRecordsByGoogleId();\n        fetchData(0); // Load the first page of data\n    }, []);\n\n    // Conditional rendering for loading state\n    if (loading) {\n        return <p>Loading...</p>;\n    }\n\n    return (\n        <div>\n            <h2>History Scores</h2>\n            <ul>\n                {paginatedHistoryScores.map((item, index) => (\n                    <li key={index}>Date:{item.date} Score:{item.score} <button onClick={() => handleDeleteScore(index,item.id)}>Delete</button></li>\n                ))}\n            </ul>\n            <div>\n                <button onClick={() => handleHistoryPageChange(currentHistoryPage - 1)} disabled={currentHistoryPage === 0}>Previous</button>\n                <span>Page {currentHistoryPage + 1}</span>\n                <button onClick={() => handleHistoryPageChange(currentHistoryPage + 1)}>Next</button>\n            </div>\n\n            <h2>All Player Scores</h2>\n            <ul>\n                {paginatedAllPlayerScores.map((item, index) => (\n                    <li key={index}>UserName:{item.userName} Date:{item.date} Score:{item.score}</li>\n                ))}\n            </ul>\n            <div>\n                <button onClick={() => handleAllPlayerPageChange(currentAllPlayerPage - 1)} disabled={currentAllPlayerPage === 0}>Previous</button>\n                <span>Page {currentAllPlayerPage + 1}</span>\n                <button onClick={() => handleAllPlayerPageChange(currentAllPlayerPage + 1)}>Next</button>\n            </div>\n        </div>\n    );\n};\n\nexport default HistoryScoreWindow;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}