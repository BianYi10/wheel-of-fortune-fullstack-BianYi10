{"ast":null,"code":"var _jsxFileName = \"/root/react-gcp-app-engine/src/App.js\",\n  _s = $RefreshSig$();\nimport logo from './wof.jpg';\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst decryptedString = decryptString(encryptedString, plainText, inputLetter);\nfunction decryptString(encryptedString, plainText, letter) {\n  // 遍历明文的每个字符\n  const decryptedString = plainText.split('').map((char, index) => {\n    // 如果当前字符和输入的字母相同，替换加密字符串对应位置的字符，否则保持原样\n    return char === letter ? encryptedString[index] : char;\n  }).join('');\n  return decryptedString;\n}\nfunction App() {\n  _s();\n  const phrase = ['Have a great day!'];\n  const [hiddenPhrase, setHiddenPhrase] = useState('');\n  const decryptString = (encryptedString, plainText, letter) => {\n    return plainText.split('').map((char, index) => {\n      return char === letter ? encryptedString[index] : char;\n    }).join('');\n  };\n  const handleGuess = event => {\n    const decryptedString = decryptString(hiddenPhrase, phrase, inputLetter);\n    setHiddenPhrase(decryptedString);\n  };\n  useEffect(() => {\n    // 在组件挂载时将 phrase 变为 hiddenPhrase\n    const tmpPhrase = phrase.replace(/[a-zA-Z]/g, '*');\n    setHiddenPhrase(tmpPhrase);\n  }, []); // 空数组表示只在组件挂载时执行一次\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        className: \"App-logo\",\n        alt: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Wheel Of Fortune\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Hidden Phrase: \", hiddenPhrase]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"input a letter to guess\",\n        value: hiddenPhrase,\n        onChange: handleGuess\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGuess,\n        children: \"Guess\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"URsi15SxBxYRKcratCGX6WcPqvo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","React","useState","useEffect","jsxDEV","_jsxDEV","decryptedString","decryptString","encryptedString","plainText","inputLetter","letter","split","map","char","index","join","App","_s","phrase","hiddenPhrase","setHiddenPhrase","handleGuess","event","tmpPhrase","replace","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","onClick","_c","$RefreshReg$"],"sources":["/root/react-gcp-app-engine/src/App.js"],"sourcesContent":["import logo from './wof.jpg';\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\n\nconst decryptedString = decryptString(encryptedString, plainText, inputLetter);\nfunction decryptString(encryptedString, plainText, letter) {\n  // 遍历明文的每个字符\n  const decryptedString = plainText.split('').map((char, index) => {\n    // 如果当前字符和输入的字母相同，替换加密字符串对应位置的字符，否则保持原样\n    return char === letter ? encryptedString[index] : char;\n  }).join('');\n\n  return decryptedString;\n}\n\nfunction App() {\n  const phrase = [\n    'Have a great day!',\n  ];\n  const [hiddenPhrase, setHiddenPhrase] = useState('');\n\n  const decryptString = (encryptedString, plainText, letter) => {\n    return plainText.split('').map((char, index) => {\n      return char === letter ? encryptedString[index] : char;\n    }).join('');\n  };\n\n\n  const handleGuess = (event) => {\n    const decryptedString = decryptString(hiddenPhrase, phrase, inputLetter);\n    setHiddenPhrase(decryptedString);\n  };\n\n  useEffect(() => {\n    // 在组件挂载时将 phrase 变为 hiddenPhrase\n    const tmpPhrase=phrase.replace(/[a-zA-Z]/g, '*');\n    setHiddenPhrase(tmpPhrase);\n  }, []); // 空数组表示只在组件挂载时执行一次\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h1>Wheel Of Fortune</h1>\n        <p>Hidden Phrase: {hiddenPhrase}</p>\n        <input\n          type=\"text\"\n          placeholder=\"input a letter to guess\"\n          value={hiddenPhrase}\n          onChange={handleGuess}\n        />\n        <button onClick={handleGuess}>Guess</button>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}