{"ast":null,"code":"var _jsxFileName = \"/root/react-gcp-app-engine/src/App.js\",\n  _s = $RefreshSig$();\nimport logo from './wof.jpg';\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  let phrase = \"Have a great day\";\n  const [hiddenPhrase, setHiddenPhrase] = useState('');\n  const [inputLetter, setInputLetter] = useState('');\n  const handleInputChange = event => {\n    setInputLetter(event.target.value);\n  };\n  const decryptString = (encryptedString, plainText, letter) => {\n    const isCorrectGuess = plainText.toLowerCase().includes(letter.toLowerCase());\n    if (isCorrectGuess) {\n      const updatedHiddenPhrase = Array.from(hiddenPhrase); // Update displayed phrase\n      phrase.split('').forEach((char, index) => {\n        if (char.toLowerCase() === letter.toLowerCase()) {\n          updatedHiddenPhrase[index] = char;\n        }\n      });\n      setHiddenPhrase(updatedHiddenPhrase.join(''));\n      if (!updatedDisplayedPhrase.includes('*')) {\n        setCorrectGuess(true);\n      }\n    }\n  };\n  const handleGuess = () => {\n    console.log(hiddenPhrase);\n    console.log(phrase);\n    console.log(inputLetter);\n    const decryptedString = decryptString(hiddenPhrase, phrase, inputLetter);\n    console.log(decryptedString);\n    setHiddenPhrase(decryptedString);\n  };\n  useEffect(() => {\n    // 在组件挂载时将 phrase 变为 hiddenPhrase\n    const tmpPhrase = phrase.replace(/[a-zA-Z]/g, '*');\n    setHiddenPhrase(tmpPhrase);\n  }, []); // 空数组表示只在组件挂载时执行一次\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        className: \"App-logo\",\n        alt: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Wheel Of Fortune\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Hidden Phrase: \", hiddenPhrase]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"input a letter to guess\",\n        value: inputLetter // 将输入框的值与状态变量关联\n        ,\n        onChange: handleInputChange // 指定输入变化时的处理函数\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGuess,\n        children: \"Guess\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"tEOKxOi1drn6AK9/PR67IcxNq3A=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","phrase","hiddenPhrase","setHiddenPhrase","inputLetter","setInputLetter","handleInputChange","event","target","value","decryptString","encryptedString","plainText","letter","isCorrectGuess","toLowerCase","includes","updatedHiddenPhrase","Array","from","split","forEach","char","index","join","updatedDisplayedPhrase","setCorrectGuess","handleGuess","console","log","decryptedString","tmpPhrase","replace","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","onClick","_c","$RefreshReg$"],"sources":["/root/react-gcp-app-engine/src/App.js"],"sourcesContent":["import logo from './wof.jpg';\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\n\nfunction App() {\n  let phrase = \"Have a great day\";\n  const [hiddenPhrase, setHiddenPhrase] = useState('');\n  const [inputLetter, setInputLetter] = useState('');\n\n  const handleInputChange = (event) => {\n    setInputLetter(event.target.value);\n  };\n\n  const decryptString = (encryptedString, plainText, letter) => {\n    const isCorrectGuess = plainText.toLowerCase().includes(letter.toLowerCase());\n\n    if (isCorrectGuess) {\n      const updatedHiddenPhrase = Array.from(hiddenPhrase); // Update displayed phrase\n      phrase.split('').forEach((char, index) => {\n        if (char.toLowerCase() === letter.toLowerCase()) {\n          updatedHiddenPhrase[index] = char;\n        }\n      });\n\n      setHiddenPhrase(updatedHiddenPhrase.join(''));\n\n      if (!updatedDisplayedPhrase.includes('*')) {\n        setCorrectGuess(true);\n      }\n    }\n  };\n\n\n  const handleGuess = () => {\n    console.log(hiddenPhrase);\n    console.log(phrase);\n    console.log(inputLetter);\n    const decryptedString = decryptString(hiddenPhrase, phrase, inputLetter);\n    console.log(decryptedString);\n    setHiddenPhrase(decryptedString);\n  };\n\n  useEffect(() => {\n    // 在组件挂载时将 phrase 变为 hiddenPhrase\n    const tmpPhrase= phrase.replace(/[a-zA-Z]/g, '*');\n    setHiddenPhrase(tmpPhrase);\n  }, []); // 空数组表示只在组件挂载时执行一次\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h1>Wheel Of Fortune</h1>\n        <p>Hidden Phrase: {hiddenPhrase}</p>\n        <input\n          type=\"text\"\n          placeholder=\"input a letter to guess\"\n          value={inputLetter} // 将输入框的值与状态变量关联\n          onChange={handleInputChange} // 指定输入变化时的处理函数\n        />\n        <button onClick={handleGuess}>Guess</button>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}